#summary Vorgehensmodell zur Erstellung eines Fachverfahrens.

= Einführung =

== Anforderungen definieren ==

=== Kurze Beschreibung des Fachverfahrens ===

Im ersten Schritt sollte das Fachverfahren grob beschrieben werden. Z.B.:

 * Das Verfahren best aus drei Phasen.
 * In der ersten Phase werden Dateien an den Server gesendet. Der Server bestätigt den Empfang.
 * In der zweiten Phase werden Ergebnisdateiten vom Server abgeholt.
 * In der dritten Phase sendet der Client eine Verarbeitungsbestätigung.

=== Abstimmung der Client-Server Kommunikation ===

Der eXTra-Client gibt in wesentlichen Punkten Gestaltungsfreiheit (Z.b. der Frage wo Daten abgelegt werden). Deshalb sollten in diesem Schritt mit dem Server-Betreuer wesentliche Eckpunkte der Kommunikation besprochen und definiert werden. Z.B.:

 * *Wo befinden sich zu sendende Daten?* (z.B. Base64 kodiert im Data-Element des Transport-Bodys)
 * *Wo legt der Server Ergebnisse ab?* (z.B. in getrennten Packages)  
 * *Fehlerbehandlung* (z.B. Return Codes vereinbaren)

Ideal wäre es, wenn in diesem Schritt auch schon die XML-Request und -Response Dokumente definiert würden.

== Infrastruktur aufbauen ==
Im folgenden wird die Realisierung des Fachverfahrens angegangen. Zunächst muss die notwendige Infrastruktur aufgebaut werden. Diese besteht aus:

 * eXTra-Client Auslieferung
 * Auslieferungen der Fachverfahren _extra-sterbedaten-ausland_ und _extra-scenario-sendfetch_ (zu Anschauungszwecken)
 * Datenbank. Aktuell wird Oracle als Datenbank unterstützt. Es bietet sich an, das Fachverfahren lokal mit Oracle XE zu entwickeln. (Weitere Datenbankunterstützung ist angedacht.)
 * soapUI (simuliert den eXTra-Server)
 * Java Laufzeitumgebung

=== Verzeichnisse für Fachverfahren erstellen ===

Als Basis für neue Fachverfahren empfiehlt es sich, die beiden bestehenden Fachverfahren Sterbedatenabgleich und Send-Fetch als Ausgangsbasis zu verwenden. Insbesondere wenn das neu zu entwickelnde Fachverfahren große Ähnlichkeit mit einem bestehenden aufweist. Durch Auspacken der Auslieferungsversionen sollte folgende Verzeichnis-Grundstruktur aufgebaut werden:
{{{
D:\eXTra
- extra-client
  - bin
  - lib
  - sql
- fachverfahren
  - extra-scenario-sendfetch
    - bin
    - conf
      - phase1
      - phase2
      - phase3
    - docs
    - logs
    - soapui
    - sql
    - work
      - input
      - reports
      - responses
  + extra-sterbedaten-ausland
  - neu
    - bin
    - conf
    - docs
    - logs
    - soapui
    - sql
    - work
}}}

Exemplarisch ist als Basisverzeichnis _D:\extra_ gewählt. Es kann aber auch jedes andere Verzeichnis genommen werden.

=== Datenbank aufbauen ===
Der Aufbau der Datenbank erfolgt über SQL-Skripte. Diese können mit einem Datenbankwerkzeug (z.B. Toad) oder mit dem OpenSource-Werkzeug   
[http://flywaydb.org flyway] ausgeführt werden. Flyway hat den Vorteil, das sehr schnell und einfach die Datenbank in einen Urzustand versetzt werden kann.

Im folgenden wird der Aufbau mit flyway gezeigt:

 * Die aktuelle flyway-Version wird von der [http://flywaydb.org Projektseite] geladen und im Basisverzeichnis (_D:\eXTra_) entpackt.
 * Oracle JDBC Treiber in D:\extra\flyway\jars ablegen.
 * Die SQL-Skripte aus den jeweiligen SQL-Verzeichnissen werden in das Verzeichnis D:\extra\flyway\sql kopiert. Folgende Struktur ergibt sich:

{{{
D:\eXTra
+ extra-client
+ fachverfahren
- flyway
  - sql
    - V1__1_0_0_createInitialDatabase.sql
    - V2__1_0_0_createInitialData.sql
    - V3__1_0_0_createInitialData.sql
    - V4__1_0_0_createInitialData.sql
}}}

In der Datei _flyway\conf\flyway.properties_ müssen noch die Datenbank-Verbindungsparameter eingetragen werden:

{{{
# Fully qualified classname of the jdbc driver
flyway.driver=oracle.jdbc.OracleDriver
# Jdbc url to use to connect to the database
flyway.url=jdbc:oracle:thin:@localhost:1521:xe
# User to use to connect to the database
flyway.user=flyway
# Password to use to connect to the database (default: <<blank>>)
flyway.password=flyway
}}}

Zum Aufbau muss jetzt in der Kommandozeile im Verzeichnis _D:\extra\flyway\bin_ der Befehl: *flyway.cmd migrate* ausgeführt werden ([http://flywaydb.org/documentation/commandline/ flyway Befehlsübersicht])

=== soapUI Projekt ===

Ein wichtiges Werkzeug für die Entwicklung und den Test eines Fachverfahrens ist soapUI. Mit soapUI kann sowohl der eXTra-Server simuliert werden als auch die Kommunikationsabläufe (Requests und Responses in den einzelnen Phasen) verfeinert werden. Die Demo-Fachverfahren enthalten jeweils ein soapUI Projekt (im Ordner _soapUI_) in dem die Requests und Responses abgelegt sind (kann als Basis für die eigene Entwicklung dienen):

http://extra-standard.googlecode.com/svn/wiki/images/extra-demo-sterbedaten-soapui.png

{{{
<element>
  <Name>xcpt:Transport</Name>
</element>
<element>
  <Name>req:TransportHeader</Name>
  <Elternelement>Transport</Elternelement>
</element>
<element>
  <Name>req:TransportBody</Name>
  <Elternelement>Transport</Elternelement>
</element>
}}}

Builder auswählen

Plugins auswählen

{{{
# -------------
# -- Plugins --
# -------------
plugins.configplugin=defaultConfigPlugin
plugins.dataplugin=fileDataPlugin
plugins.outputplugin=wsOutputPlugin
plugins.responseprocessplugin=acknowledgePhase1ResponseProcessPlugin
plugins.execution=executionPersistenceJpa
}}}

DB-Inhalte erstellen

Dateistruktur


= Ausblick =